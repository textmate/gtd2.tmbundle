<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>saveActiveFile</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby  

require "#{ENV['TM_SUPPORT_PATH']}/lib/textmate"
require "erb"
require "pp"
include ERB::Util

$myPath = ENV['TM_DIRECTORY'] 
$tags = [] #user defined contexts

def readContexts(a)
  # processes contexts.gtd into script  
  context, tabCommand, tabString, regex, color = a.split(/\|/)
  $tags.push({:label =&gt; context[3..-1], :regexp =&gt; regex, :color =&gt; color, :matches =&gt; []})  
end


def TextMate.file_link (file, line = 0)
  return "txmt://open/?url=file://" + $myPath + "/" +
    file.gsub(/[^a-zA-Z0-9.-\/]/) { |m| sprintf("%%%02X", m[0]) } +
    ".gtd&amp;amp;line=" + line.to_s
end 

# the contexts.gtd file is read, and converted into $contexts
file = File.open($myPath+"/contexts.gtd", "r")
file.each do |line|
  readContexts(line)
end 

# new feature - exclusion of selected files
# this allows you to select which lists are included
# in list views
class ExList
  def initialize
    @values = []
  end
  def contains(test)
    found = true
    @values.each do |item|
      if test == item.chomp
        found = false
      end
    end
    return found
  end
  def add(item)
    @values.push item
  end
  def print
    puts @values
  end
end

xFile = File.open($myPath+"/excluded.gtd", "r")

myList = ExList.new

xFile.each do |line|
  myList.add(line)
end

# sorting happens
$tags.each do |tag| 
  context = tag[:regexp]
  puts context
  myFiles = Dir.entries($myPath)
  myFiles.each do |fileName|
    if ((fileName[-3,3] == "gtd") and myList.contains(fileName))
      lineno = 0
      mFile = File.open(fileName) 
      mFile.each do |line|
        lineno = lineno + 1
        tLine = line[3..-1]
        if tLine != nil
          re = /\s/
          if line[0..1] == "- "
            ctask = re.match(tLine)
          else 
            ctask = re.match(line)
          end
          if (ctask.pre_match == context)
            results = {
              :file =&gt; fileName[0..-5],
              :line =&gt; lineno,
              :content =&gt; ctask.post_match    
            }
            #results[:match] = html_escape($1)
            tag[:matches] &lt;&lt; results
          end
	   end
        #puts results.to_s       
      end
    end
  end
end


tmpl_file = "#{ENV['TM_BUNDLE_SUPPORT']}/template.rhtml"
puts ERB.new(File.open(tmpl_file), 0, '&lt;&gt;').result</string>
	<key>input</key>
	<string>none</string>
	<key>keyEquivalent</key>
	<string>^@T</string>
	<key>name</key>
	<string>GTD2 List View</string>
	<key>output</key>
	<string>showAsHTML</string>
	<key>scope</key>
	<string>text.plain.gtd2</string>
	<key>uuid</key>
	<string>8394A5AA-12B9-4DE6-9A48-C59C5B34FB58</string>
</dict>
</plist>
